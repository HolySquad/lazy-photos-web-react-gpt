{
  "openapi": "3.0.4",
  "info": {
    "title": "Lazy.MyPhotos API",
    "version": "v1"
  },
  "paths": {
    "/Album": {
      "get": {
        "tags": [
          "Album"
        ],
        "summary": "Retrieves a list of available albums.",
        "description": "This method returns all albums currently available in the system. If no albums are available,\r\n            the response will contain an empty list.",
        "operationId": "GetAlbums",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlbumItemModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlbumItemModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlbumItemModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Album"
        ],
        "summary": "Creates a new album with the specified name and associated photos.",
        "description": "This method creates a new album and associates the specified photos with it.  The album is\r\n            created asynchronously, and the operation can be canceled using the provided ct.",
        "parameters": [
          {
            "name": "albumName",
            "in": "query",
            "description": "The name of the album to create. Cannot be null or empty.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "An array of photo IDs to associate with the album. The array can be empty, but cannot be null.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              },
              "text/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/Album/{albumId}": {
      "delete": {
        "tags": [
          "Album"
        ],
        "summary": "Deletes the album with the specified identifier.",
        "description": "This operation is idempotent. If the specified album does not exist, the method still returns\r\n            Microsoft.AspNetCore.Mvc.NoContentResult.",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "The unique identifier of the album to delete.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/AlbumPhotos/{albumId}/photos": {
      "post": {
        "tags": [
          "AlbumPhotos"
        ],
        "summary": "Adds one or more photos to the specified album.",
        "description": "This method invokes the album service to associate the specified photos with the given album.\r\n            Ensure that the album and photo identifiers are valid and that the user has the necessary permissions to modify\r\n            the album.",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "The unique identifier of the album to which the photos will be added.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "An array of unique identifiers representing the photos to add to the album.",
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/AlbumPhotos/{albumId}/photos/{photoId}": {
      "post": {
        "tags": [
          "AlbumPhotos"
        ],
        "summary": "Adds one photo to the specified album.",
        "description": "This method invokes the album service to associate the specified photo with the given album.\r\n            Ensure that the album and photo identifiers are valid and that the user has the necessary permissions to modify\r\n            the album.",
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "description": "The unique identifier of the album to which the photos will be added.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "photoId",
            "in": "path",
            "description": "The unique identifier representing the photo to add to the album.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "tags": [
          "AlbumPhotos"
        ],
        "parameters": [
          {
            "name": "albumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "photoId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/AlbumPhotos/{id}/photos": {
      "get": {
        "tags": [
          "AlbumPhotos"
        ],
        "summary": "Retrieves an album by its unique identifier.",
        "description": "The id must correspond to an existing album in the system. If the album does\r\n            not exist, the response will indicate an error.",
        "operationId": "GetAlbumById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the album to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AlbumModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlbumModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlbumModel"
                }
              }
            }
          }
        }
      }
    },
    "/register": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "parameters": [
          {
            "name": "useCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "useSessionCookies",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/refresh": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/confirmEmail": {
      "get": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "operationId": "MapIdentityApi-/confirmEmail",
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "code",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "changedEmail",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/resendConfirmationEmail": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResendConfirmationEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/forgotPassword": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/resetPassword": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/manage/2fa": {
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TwoFactorRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TwoFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/manage/info": {
      "get": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "Lazy.MyPhotos.Api"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InfoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/Photo": {
      "get": {
        "tags": [
          "Photo"
        ],
        "summary": "Retrieves the latest photos with pagination support.",
        "description": "This method supports pagination by using the offset and pageSize parameters. The photos are retrieved in descending order of their creation or upload\r\n            time.",
        "operationId": "LatestPhotos",
        "parameters": [
          {
            "name": "offset",
            "in": "query",
            "description": "The zero-based index of the first photo to retrieve. Must be non-negative.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The maximum number of photos to retrieve. If less than or equal to 0, a default value of 20 is used.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhotoModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhotoModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PhotoModel"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Photo"
        ],
        "summary": "Uploads a photo to the server and processes it asynchronously.",
        "description": "The uploaded photo is processed using the provided Microsoft.AspNetCore.Http.IFormFile stream. \r\n            Ensure that the file is not null and contains valid data before calling this method.",
        "operationId": "UploadPhoto",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "The photo file to be uploaded. Must be a valid Microsoft.AspNetCore.Http.IFormFile instance.",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoUploadResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoUploadResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoUploadResult"
                }
              }
            }
          }
        }
      }
    },
    "/Photo/{id}": {
      "get": {
        "tags": [
          "Photo"
        ],
        "summary": "Retrieves a photo by its unique identifier.",
        "description": "This method returns an HTTP 200 OK response with the photo data if the photo is\r\n            found, or an HTTP 404 Not Found response if the photo does not exist.",
        "operationId": "GetPhotoById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The unique identifier of the photo to retrieve. Must be a positive long value.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PhotoModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/User/currentUser": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Retrieves the currently authenticated user.",
        "description": "This method returns the details of the user associated with the current\r\n            authentication context. If no user is authenticated, the method returns a 404 Not Found response.",
        "operationId": "CurrentUser",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AccessTokenResponse": {
        "required": [
          "accessToken",
          "expiresIn",
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "tokenType": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "accessToken": {
            "type": "string",
            "nullable": true
          },
          "expiresIn": {
            "type": "integer",
            "format": "int64"
          },
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlbumItemModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "photoCount": {
            "type": "integer",
            "format": "int32"
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "thumbnailPath": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlbumModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "photoCount": {
            "type": "integer",
            "format": "int32"
          },
          "thumbnailPath": {
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "albumPhotos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlbumPhotoData"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AlbumPhotoData": {
        "type": "object",
        "properties": {
          "photoId": {
            "type": "integer",
            "format": "int64"
          },
          "blobUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ForgotPasswordRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "InfoRequest": {
        "type": "object",
        "properties": {
          "newEmail": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          },
          "oldPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InfoResponse": {
        "required": [
          "email",
          "isEmailConfirmed"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "isEmailConfirmed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "twoFactorRecoveryCode": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PhotoMetadata": {
        "type": "object",
        "properties": {
          "cameraModel": {
            "type": "string",
            "nullable": true
          },
          "aperture": {
            "type": "string",
            "nullable": true
          },
          "shutterTime": {
            "type": "string",
            "nullable": true
          },
          "focusRange": {
            "type": "integer",
            "format": "int32"
          },
          "isoCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "PhotoModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "displayFileName": {
            "type": "string",
            "nullable": true
          },
          "photoUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailUrl": {
            "type": "string",
            "nullable": true
          },
          "blobId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "photoMetadata": {
            "$ref": "#/components/schemas/PhotoMetadata"
          }
        },
        "additionalProperties": false
      },
      "PhotoUploadResult": {
        "type": "object",
        "properties": {
          "blobUrl": {
            "type": "string",
            "nullable": true
          },
          "thumbnailBlobUrl": {
            "type": "string",
            "nullable": true
          },
          "blobId": {
            "type": "string",
            "format": "uuid"
          },
          "photoId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "RefreshRequest": {
        "required": [
          "refreshToken"
        ],
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RegisterRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResendConfirmationEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResetPasswordRequest": {
        "required": [
          "email",
          "newPassword",
          "resetCode"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "resetCode": {
            "type": "string",
            "nullable": true
          },
          "newPassword": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TwoFactorRequest": {
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "nullable": true
          },
          "twoFactorCode": {
            "type": "string",
            "nullable": true
          },
          "resetSharedKey": {
            "type": "boolean"
          },
          "resetRecoveryCodes": {
            "type": "boolean"
          },
          "forgetMachine": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "TwoFactorResponse": {
        "required": [
          "isMachineRemembered",
          "isTwoFactorEnabled",
          "recoveryCodesLeft",
          "sharedKey"
        ],
        "type": "object",
        "properties": {
          "sharedKey": {
            "type": "string",
            "nullable": true
          },
          "recoveryCodesLeft": {
            "type": "integer",
            "format": "int32"
          },
          "recoveryCodes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isTwoFactorEnabled": {
            "type": "boolean"
          },
          "isMachineRemembered": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter bearer",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}